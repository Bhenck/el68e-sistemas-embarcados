###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         21/Mar/2019  18:52:51
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\repositories\sistemas-embarcados\lab-0\es_user\src\main.c
#    Command line =  
#        -f C:\Users\Marcelo\AppData\Local\Temp\EW57F1.tmp
#        (C:\repositories\sistemas-embarcados\lab-0\es_user\src\main.c -D ewarm
#        -D PART_TM4C1294NCPDT -lcN
#        C:\repositories\sistemas-embarcados\lab-0\es_user\Debug\List -o
#        C:\repositories\sistemas-embarcados\lab-0\es_user\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\repositories\sistemas-embarcados\lab-0\es_user\..\..\..\ -I
#        C:\repositories\sistemas-embarcados\lab-0\es_user\..\ -I
#        C:\repositories\sistemas-embarcados\lab-0\es_user\..\inc\ -I
#        C:\repositories\sistemas-embarcados\lab-0\es_user\..\driverlib\ -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.2\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\repositories\sistemas-embarcados\lab-0\es_user\Debug\List\main.lst
#    Object file  =  
#        C:\repositories\sistemas-embarcados\lab-0\es_user\Debug\Obj\main.o
#
###############################################################################

C:\repositories\sistemas-embarcados\lab-0\es_user\src\main.c
      1          #include <stdbool.h>
      2          #include <stdint.h>
      3          #include "inc/tm4c1294ncpdt.h" // CMSIS-Core
      4          #include "inc/hw_memmap.h"
      5          #include "driverlib/sysctl.h" // driverlib
      6          #include "driverlib/gpio.h"
      7          #include "driverlib/systick.h"
      8          
      9          uint8_t LED_D1 = 0;
     10          
     11          void SysTick_Handler(void){
     12              GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_1, LED_D1); // Acende ou apaga LED D1
     13              LED_D1 ^= GPIO_PIN_1; // Troca estado do LED D1
     14          } // SysTick_Handler
     15          
     16          void main(void){
     17            uint32_t ui32SysClock = SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ |
     18                                                        SYSCTL_OSC_MAIN |
     19                                                        SYSCTL_USE_PLL |
     20                                                        SYSCTL_CFG_VCO_480),
     21                                                        24000000); // PLL em 24MHz
     22            
     23            SysTickEnable();
     24            SysTickPeriodSet(2400000); // f = 5Hz
     25            
     26            SysCtlPeripheralEnable(SYSCTL_PERIPH_GPION); // Habilita GPIO N (LED D1 = PN1, LED D2 = PN0)
     27            while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPION)); // Aguarda final da habilitação
     28            
     29            GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE, GPIO_PIN_0 | GPIO_PIN_1); // LEDs D1 e D2 como saída
     30            GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0 | GPIO_PIN_1, 0); // LEDs D1 e D2 apagados
     31            GPIOPadConfigSet(GPIO_PORTN_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_STRENGTH_12MA, GPIO_PIN_TYPE_STD);
     32          
     33            SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF); // Habilita GPIO F (LED D3 = PF4, LED D4 = PF0)
     34            while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF)); // Aguarda final da habilitação
     35              
     36            GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4); // LEDs D3 e D4 como saída
     37            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4, 0); // LEDs D3 e D4 apagados
     38            GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4, GPIO_STRENGTH_12MA, GPIO_PIN_TYPE_STD);
     39          
     40            SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOJ); // Habilita GPIO J (push-button SW1 = PJ0, push-button SW2 = PJ1)
     41            while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOJ)); // Aguarda final da habilitação
     42              
     43            GPIOPinTypeGPIOInput(GPIO_PORTJ_BASE, GPIO_PIN_0 | GPIO_PIN_1); // push-buttons SW1 e SW2 como entrada
     44            GPIOPadConfigSet(GPIO_PORTJ_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
     45          
     46            SysTickIntEnable();
     47          
     48            uint8_t i = 0;
     49            while(1){
     50              i++;
     51              if(GPIOPinRead(GPIO_PORTJ_BASE, GPIO_PIN_0) == GPIO_PIN_0) // Testa estado do push-button SW1
     52                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_4, 0); // Apaga LED D3
     53              else
     54                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_4, GPIO_PIN_4); // Acende LED D3
     55          
     56              if(GPIOPinRead(GPIO_PORTJ_BASE, GPIO_PIN_1) == GPIO_PIN_1) // Testa estado do push-button SW2
     57                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_0, 0); // Apaga LED D4
     58              else
     59                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_0, GPIO_PIN_0); // Acende LED D4
     60            } // while
     61          } // main

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SysTick_Handler
         8   -> GPIOPinWrite
      16   main
        16   -> GPIOPadConfigSet
        16   -> GPIOPinRead
        16   -> GPIOPinTypeGPIOInput
        16   -> GPIOPinTypeGPIOOutput
        16   -> GPIOPinWrite
        16   -> SysCtlClockFreqSet
        16   -> SysCtlPeripheralEnable
        16   -> SysCtlPeripheralReady
        16   -> SysTickEnable
        16   -> SysTickIntEnable
        16   -> SysTickPeriodSet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
       1  LED_D1
      24  SysTick_Handler
     238  main

 
   1 byte  in section .bss
 302 bytes in section .text
 
 302 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
