###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         28/Mar/2019  18:11:16
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\repositories\sistemas-embarcados\lab-1\display\src\main.c
#    Command line =  
#        -f C:\Users\Marcelo\AppData\Local\Temp\EW818D.tmp
#        (C:\repositories\sistemas-embarcados\lab-1\display\src\main.c -D ewarm
#        -D PART_TM4C1294NCPDT -lcN
#        C:\repositories\sistemas-embarcados\lab-1\display\Debug\List -o
#        C:\repositories\sistemas-embarcados\lab-1\display\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\repositories\sistemas-embarcados\lab-1\display\..\..\..\ -I
#        C:\repositories\sistemas-embarcados\lab-1\display\..\ -I
#        C:\repositories\sistemas-embarcados\lab-1\display\..\inc\ -I
#        C:\repositories\sistemas-embarcados\lab-1\display\..\driverlib\ -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.2\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\repositories\sistemas-embarcados\lab-1\display\Debug\List\main.lst
#    Object file  =  
#        C:\repositories\sistemas-embarcados\lab-1\display\Debug\Obj\main.o
#
###############################################################################

C:\repositories\sistemas-embarcados\lab-1\display\src\main.c
      1          #include <stdbool.h>
      2          #include <stdint.h>
      3          #include "inc/tm4c1294ncpdt.h" // CMSIS-Core
      4          #include "inc/hw_memmap.h"
      5          #include "driverlib/sysctl.h" // driverlib
      6          #include "driverlib/gpio.h"
      7          #include "driverlib/systick.h"
      8          #include "grlib/grlib.h"
      9          #include "system_tm4c1294ncpdt.h" // CMSIS-Core
     10          #include "cfaf128x128x16.h"
     11          
     12          uint8_t LED_D1 = 0;
     13          
     14          
     15          //----------
     16          tContext sContext;
     17          
     18          void initOLED (){
     19            cfaf128x128x16Init();
     20            cfaf128x128x16Clear();
     21            GrContextInit(&sContext, &g_sCfaf128x128x16);
     22            GrFlush(&sContext);
     23            GrContextFontSet(&sContext, g_psFontFixed6x8);
     24            GrContextForegroundSet(&sContext, ClrWhite);
     25            GrContextBackgroundSet(&sContext, ClrBlack);  
     26          }
     27          
     28          void initContext(){
     29            GrStringDraw(&sContext, " Sistemas  Embarcados ", -1, 0, 60, true);
     30            GrStringDraw(&sContext, "       2018/2         ", -1, 0, 70, true);
     31          }
     32          //----------
     33          
     34          
     35          void SysTick_Handler(void){
     36              GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_1, LED_D1); // Acende ou apaga LED D1
     37              LED_D1 ^= GPIO_PIN_1; // Troca estado do LED D1
     38          } // SysTick_Handler
     39          
     40          void main(void){
     41            SystemInit(); // SystemCoreClock = 24Mhz (system_tm4c1294ncpdt.c)
     42            initOLED(); // DISPLAY_SSI_CLOCK = 12MHz (cfaf128x128x16.c)
     43            initContext();
     44            
     45            SysTickEnable();
     46            SysTickPeriodSet(2400000); // f = 5Hz
     47            
     48            SysCtlPeripheralEnable(SYSCTL_PERIPH_GPION); // Habilita GPIO N (LED D1 = PN1, LED D2 = PN0)
     49            while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPION)); // Aguarda final da habilitação
     50            
     51            GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE, GPIO_PIN_0 | GPIO_PIN_1); // LEDs D1 e D2 como saída
     52            GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0 | GPIO_PIN_1, 0); // LEDs D1 e D2 apagados
     53            GPIOPadConfigSet(GPIO_PORTN_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_STRENGTH_12MA, GPIO_PIN_TYPE_STD);
     54          
     55            SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF); // Habilita GPIO F (LED D3 = PF4, LED D4 = PF0)
     56            while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF)); // Aguarda final da habilitação
     57              
     58            GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4); // LEDs D3 e D4 como saída
     59            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4, 0); // LEDs D3 e D4 apagados
     60            GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4, GPIO_STRENGTH_12MA, GPIO_PIN_TYPE_STD);
     61          
     62            SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOJ); // Habilita GPIO J (push-button SW1 = PJ0, push-button SW2 = PJ1)
     63            while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOJ)); // Aguarda final da habilitação
     64              
     65            GPIOPinTypeGPIOInput(GPIO_PORTJ_BASE, GPIO_PIN_0 | GPIO_PIN_1); // push-buttons SW1 e SW2 como entrada
     66            GPIOPadConfigSet(GPIO_PORTJ_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
     67          
     68            SysTickIntEnable();
     69            
     70            while(1){
     71              if(GPIOPinRead(GPIO_PORTJ_BASE, GPIO_PIN_0) == GPIO_PIN_0) // Testa estado do push-button SW1
     72                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_4, 0); // Apaga LED D3
     73              else
     74                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_4, GPIO_PIN_4); // Acende LED D3
     75          
     76              if(GPIOPinRead(GPIO_PORTJ_BASE, GPIO_PIN_1) == GPIO_PIN_1) // Testa estado do push-button SW2
     77                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_0, 0); // Apaga LED D4
     78              else
     79                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_0, GPIO_PIN_0); // Acende LED D4
     80            } // while
     81          } // main

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SysTick_Handler
         8   -> GPIOPinWrite
      16   initContext
        16   -> GrStringDraw
      16   initOLED
        16   -- Indirect call
        16   -> GrContextFontSet
        16   -> GrContextInit
        16   -> cfaf128x128x16Clear
        16   -> cfaf128x128x16Init
      16   main
        16   -> GPIOPadConfigSet
        16   -> GPIOPinRead
        16   -> GPIOPinTypeGPIOInput
        16   -> GPIOPinTypeGPIOOutput
        16   -> GPIOPinWrite
        16   -> SysCtlPeripheralEnable
        16   -> SysCtlPeripheralReady
        16   -> SysTickEnable
        16   -> SysTickIntEnable
        16   -> SysTickPeriodSet
        16   -> SystemInit
        16   -> initContext
        16   -> initOLED


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      24  ?_0
      24  ?_1
       1  LED_D1
      24  SysTick_Handler
      50  initContext
      72  initOLED
     238  main
      44  sContext

 
  45 bytes in section .bss
  48 bytes in section .rodata
 436 bytes in section .text
 
 436 bytes of CODE  memory
  48 bytes of CONST memory
  45 bytes of DATA  memory

Errors: none
Warnings: none
